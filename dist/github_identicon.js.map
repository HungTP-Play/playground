{"mappings":";;;;;;;AAAA;;;;CAIC;AAEM,MAAM;IACT,YAAY,KAAK,CAAE,CAAE;IAErB,cAAc,KAAK,EAAE;QACjB,OAAO,uBAAc;IACzB;IAEA,QAAQ,OAAO,EAAE;QACb,OAAO,QAAQ,SAAS,oBAAW;IACvC;IAGA,QAAQ,OAAO,EAAE;QACb,IAAI,SAAS;QACb,MAAM,MAAM,IAAI,CAAC,QAAQ;QACzB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,EAAG;YACpC,IAAI,UAAU,IAAI,OAAO,GAAG;YAC5B,IAAI,YAAY,SAAS,SAAS;YAClC,IAAI,aAAa,UAAU,SAAS,GAAG,SAAS,GAAG;YACnD,UAAU;QACd;QACA,OAAO;IACX;AACJ","sources":["github_identicon.js"],"sourcesContent":["/**\n * Dependencies\n * \n * [CryptoJS](https://www.npmjs.com/package/crypto-js)\n */\nimport * as Crypto from 'crypto-js';\nexport class GithubIdenticon {\n    constructor(value) { }\n\n    calculateHash(value) {\n        return Crypto.SHA256(value);\n    }\n\n    hashHex(hashVal) {\n        return hashVal.toString(Crypto.enc.Hex);\n    }\n\n\n    hashBin(hashVal) {\n        var binary = \"\";\n        const hex = this.hashHex(hashVal);\n        for (var i = 0; i < hex.length; i += 2) {\n            var hexByte = hex.substr(i, 2);\n            var byteValue = parseInt(hexByte, 16);\n            var byteBinary = byteValue.toString(2).padStart(8, \"0\");\n            binary += byteBinary;\n        }\n        return binary;\n    }\n}"],"names":[],"version":3,"file":"github_identicon.js.map"}