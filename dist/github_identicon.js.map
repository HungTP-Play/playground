{"mappings":";;;;;;;AAAA;;;;CAIC;AAEM,MAAM;IACT,QAAQ,GAAE;IACV,YAAY,KAAK,CAAE;QACf,IAAI,CAAC,QAAQ;IACjB;IAEA,cAAc,KAAK,EAAE;QACjB,OAAO,uBAAc;IACzB;IAEA,QAAQ,OAAO,EAAE;QACb,OAAO,QAAQ,SAAS,oBAAW;IACvC;IAGA,QAAQ,GAAG,EAAE;QACT,IAAI,SAAS;QACb,IAAK,IAAI,KAAI,GAAG,KAAI,IAAI,QAAQ,MAAK,EAAG;YACpC,IAAI,UAAU,IAAI,OAAO,IAAG;YAC5B,IAAI,YAAY,SAAS,SAAS;YAClC,IAAI,aAAa,UAAU,SAAS,GAAG,SAAS,GAAG;YACnD,UAAU;QACd;QACA,OAAO;IACX;IAEA,YAAY,SAAS,EAAE;QACnB,OAAO,SAAS,WAAW;IAC/B;IAEA,QAAQ,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE;QAC1B,OAAO,UAAU,MAAM,MAAM,OAAO;IACxC;IAEA,YAAY,SAAS,EAAE;QACnB,MAAM,UAAU,IAAI,CAAC,QAAQ,GAAG,GAAG;QACnC,MAAM,YAAY,IAAI,CAAC,QAAQ,GAAG,GAAG;QACrC,MAAM,WAAW,IAAI,CAAC,QAAQ,IAAI,GAAG;QAErC,MAAM,SAAS,IAAI,CAAC,YAAY;QAChC,MAAM,WAAW,IAAI,CAAC,YAAY;QAClC,MAAM,UAAU,IAAI,CAAC,YAAY;QAEjC,OAAO;YAAC;YAAQ;YAAU;SAAQ;IACtC;IAEA,aAAa,SAAS,EAAE;QACpB,MAAM,eAAe;QACrB,MAAM,oBAAoB,IAAI,MAAM,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG;YACpD,OAAO,eAAe,KAAI;QAC9B;QAEA,MAAM,kBAAkB,kBAAkB,IAAI,CAAC;YAC3C,MAAM,OAAO,IAAI,CAAC,QAAQ,GAAG,GAAG;YAChC,OAAO,IAAI,CAAC,YAAY;QAC5B;QAEA,OAAO,gBAAgB,IAAI,CAAC,IAAM,IAAI,KAAK;IAC/C;IAEA,oBAAoB;QAChB,MAAM,UAAU,IAAI,CAAC,cAAc,IAAI,CAAC;QACxC,MAAM,aAAa,IAAI,CAAC,QAAQ;QAChC,MAAM,YAAY,IAAI,CAAC,QAAQ;QAE/B,MAAM,MAAM,IAAI,CAAC,YAAY;QAC7B,MAAM,aAAa,IAAI,CAAC,aAAa;QAErC,OAAO;iBACH;wBACA;QACJ;IACJ;AACJ","sources":["github_identicon.js"],"sourcesContent":["/**\n * Dependencies\n * \n * [CryptoJS](https://www.npmjs.com/package/crypto-js)\n */\nimport * as Crypto from 'crypto-js';\nexport class GithubIdenticon {\n    value = ''\n    constructor(value) {\n        this.value = value;\n    }\n\n    calculateHash(value) {\n        return Crypto.SHA256(value);\n    }\n\n    hashHex(hashVal) {\n        return hashVal.toString(Crypto.enc.Hex);\n    }\n\n\n    hashBin(hex) {\n        var binary = \"\";\n        for (var i = 0; i < hex.length; i += 2) {\n            var hexByte = hex.substr(i, 2);\n            var byteValue = parseInt(hexByte, 16);\n            var byteBinary = byteValue.toString(2).padStart(8, \"0\");\n            binary += byteBinary;\n        }\n        return binary;\n    }\n\n    binaryToInt(binString) {\n        return parseInt(binString, 2);\n    }\n\n    getBits(from, len, binString) {\n        return binString.slice(from, from + len)\n    }\n\n    getRgbColor(binString) {\n        const redBits = this.getBits(0, 8, binString);\n        const greenBits = this.getBits(8, 8, binString);\n        const blueBits = this.getBits(16, 8, binString);\n\n        const redVal = this.binaryToInt(redBits);\n        const greenVal = this.binaryToInt(greenBits);\n        const blueVal = this.binaryToInt(blueBits);\n\n        return [redVal, greenVal, blueVal];\n    }\n\n    getPlacement(binString) {\n        const START_OFFSET = 24\n        const placementFromBits = new Array(15).fill(0).map((_, i) => {\n            return START_OFFSET + i * 8;\n        });\n\n        const placementValues = placementFromBits.map((v) => {\n            const bits = this.getBits(i, 8, binString);\n            return this.binaryToInt(bits)\n        });\n\n        return placementValues.map((v) => v % 2 == 0);\n    }\n\n    getIdenticonParts() {\n        const valHash = this.calculateHash(this.value);\n        const valHashHex = this.hashHex(valHash);\n        const valHasBin = this.hashBin(valHashHex);\n\n        const rgb = this.getRgbColor(valHasBin);\n        const placements = this.getPlacement(valHasBin);\n\n        return {\n            rgb,\n            placements,\n        }\n    }\n}"],"names":[],"version":3,"file":"github_identicon.js.map"}